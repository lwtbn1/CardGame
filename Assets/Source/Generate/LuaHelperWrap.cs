//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaHelper), typeof(System.Object));
		L.RegFunction("GetResManager", GetResManager);
		L.RegFunction("GetUIManager", GetUIManager);
		L.RegFunction("GetNetworkManager", GetNetworkManager);
		L.RegFunction("AddUpdateEvent", AddUpdateEvent);
		L.RegFunction("RemoveUpdateEvent", RemoveUpdateEvent);
		L.RegFunction("GetModule", GetModule);
		L.RegFunction("Call", Call);
		L.RegFunction("LuaFuncDispose", LuaFuncDispose);
		L.RegFunction("New", _CreateLuaHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaHelper obj = new LuaHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaHelper.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ResManager o = LuaHelper.GetResManager();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UIManager o = LuaHelper.GetUIManager();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNetworkManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetworkManager o = LuaHelper.GetNetworkManager();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUpdateEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			LuaHelper.AddUpdateEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveUpdateEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			LuaHelper.RemoveUpdateEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			LuaInterface.LuaTable o = LuaHelper.GetModule(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Call(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			object[] arg1 = ToLua.CheckObjectArray(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			object[] o = LuaHelper.Call(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaFuncDispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			LuaHelper.LuaFuncDispose(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

